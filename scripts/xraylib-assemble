#!/usr/bin/env python

import numpy as np
import os, optparse, itertools, locale
import h5py, fabio

import xraylib
from xraylib import f2w, files, utils, fit

class Assembler(utils.Script):
    def __init__(self, **kwargs):
        super(Assembler, self).__init__()
        self.usage = "xraylib-assemble <options> diffractogram.h5"
        self.description = """
        """
        self.peak = {}
        self.peak.update(kwargs)

    def parser_setup(self):
        super(Assembler, self).parser_setup()

        input_group = optparse.OptionGroup(self.parser, "Input options")
        input_group.add_option("--position", dest="peak_position",
                          help="Peak channel position")
        input_group.add_option("--fwhm", dest="peak_fwhm",
                          help="Peak FWHM full width at half maximum")
        input_group.add_option("--fit-width", dest="fit_width",
                          help="Number of FWHM to include in peak fitting. [default 2]")
        input_group.add_option("--shape", dest="peak_shape",
                          help="Peak shape. [gaussian|delta]", default='gaussian')
        input_group.add_option("--peak-file", dest="peak_file",
                          help="Exported peaks from DAWN.", metavar="FILE")
        input_group.add_option("--input-set", dest="input_set",
                          help='Override data set [default %s].' % (xraylib.DIFFRACTOGRAM_DATA_SET,),
                          metavar="STRING", default=xraylib.DIFFRACTOGRAM_DATA_SET)
        self.parser.add_option("--flip", dest="flip",
                          action="store_true", default=False,
                          help="Flip every other scan line.")


        output_group = optparse.OptionGroup(self.parser, "Output options")
        output_group.add_option("-o", "--out", dest="outfile",
                          help="Output file.", metavar="FILE", default="sinogram.h5")

        self.parser.add_option_group(input_group)
        self.parser.add_option_group(output_group)

    @utils.Script.timed
    def parse(self):
        super(Assembler, self).parse()

        self.do_flip = self.options.flip

        stacks = len(self.args)
        if stacks == 0 or not os.path.exists(self.args[0]):
            self.parser.error("Please specify diffractograms")

        if not all(os.path.exists(o) for o in self.args):
            self.parser.error("Could not read all files")

        self.print_verbose('Loading slice %s' % 0)
        diffractogram = files.ImageFile(self.args[0]).getImage(self.options.input_set)
        darkcurrent_profile = files.ImageFile(self.args[0]).getImage(xraylib.DARKCURRENT_DATA_SET)
        self.input_data = np.zeros((stacks,)+diffractogram.shape)
        self.darkcurrent_profile = np.zeros((stacks,)+darkcurrent_profile.shape)
        self.input_data[0] = diffractogram
        self.darkcurrent_profile[0] = darkcurrent_profile

        diff_seq = files.ImageSequence(self.args,data_set=self.options.input_set)
        dark_seq = files.ImageSequence(self.args,data_set=xraylib.DARKCURRENT_DATA_SET)
        for i in xrange(1,stacks):
            self.print_verbose('Loading slice %s' % i)
            self.input_data[i] = next(diff_seq)
            self.darkcurrent_profile[i] = next(dark_seq)

        self.output_shape = self.input_data.shape[:-1]

        self.peaks = [{
                'fwhm'      : self.options.peak_fwhm,
                'position'  : self.options.peak_position,
                'shape'     : self.options.peak_shape
                'fit_width' : self.options.fit_width
        }]

        self.peaks[0] = utils.strip_none_values(self.peak)
        self.peaks[0] = utils.convert(self.peak,float)

        if self.options.peak_file:
            # Replace peak list with fits
            # from dat file exported in DAWN
            self.peaks = []
            with open(self.options.peak_file, 'rb') as f:
                try:
                    data = f.readlines()
                    assert(len(data)>1)
                    header = data[0]
                    assert('#' in header)
                    data = data[1:]
                    header = header[1:].strip().lower().split()
                    for peak_line in data:
                        peak_line = peak_line.split('#')[0]
                        # Convert floats with locale-aware atof
                        peak_line = map(locale.atof,peak_line.split())
                        peak = dict(zip(header,peak_line))
                        if 'shape' not in peak:
                            peak['shape'] = fit.GAUSSIAN
                        peak = utils.strip_none_values(peak)
                        if 'fit_width' in peak:
                            print peak['fit_width']
                        if 'position' in peak and 'fwhm' in peak:
                            self.peaks.append(peak)
                except:
                    self.parser.error("Could not parse peak file %s" % (self.options.peak_file,))


        self.out_file = h5py.File(self.options.outfile)
        self.sinogram_group = self.out_file.require_group(xraylib.SINOGRAM_GROUP)
        self.peak_group = self.out_file.require_group(xraylib.SINOGRAM_PEAK_GROUP)


    @utils.Script.timed
    def assemble_peaks(self):
        for peak in self.peaks:
            self.peak_name = '%s (%s,%s)'  % (peak['shape'],peak['position'],peak['fwhm'],)
            if self.peak_name in self.sinogram_group:
                self.print_verbose(self.peak_name, " already assembled")
                continue
                
            self.sinogram = self.sinogram_group.require_dataset(
                               name=self.peak_name,
                               shape=tuple(self.output_shape),
                               dtype="float32"
            )
            self.print_verbose("Assembling ", self.peak_name)
            self.assemble(peak)

    def assemble(self, peak):
        """ Do weighted least squares fitting of peak shape
        to linear background using data in interval of four FWHM. """
        if 'fit_width' in peak:
            fit_width = peak['fit_width'] / 2.0
        else:
            fit_width = 2
        r_min = int(np.round(peak['position'] - fit_width*peak['fwhm']))
        r_max = int(np.round(peak['position'] + fit_width*peak['fwhm']))
        r = np.arange(r_min,r_max)

        peak_fun = fit.get_peak_function(**peak)

        sinogram_peaks = self.peak_group.require_dataset(
                           name=self.peak_name,
                           shape=tuple(self.output_shape) + (2,r.size,),
                           dtype="float32"
        )

        A = np.array([np.ones(r.size), r, peak_fun(r)])
        darkcurrent = self.darkcurrent_profile[...,r_min:r_max]
        if len(self.darkcurrent_profile.shape) > 2:
            if darkcurrent.shape[1] != self.input_data.shape[-2]:
                self.parser.error("Darkcurrent frames does not match the number of data frames")
            nframes = darkcurrent.shape[1]
        else:
            darkcurrent = self.darkcurrent_profile[...,r_min:r_max]
            darkcurrent.shape = (1,1,) + darkcurrent.shape
            nframes = 1

        ''' Fit peaks for sinogram. Last dimension is assumed
            to be the radial profile '''
        # Use temporary numpy array for assembly since we need reverse ::-1
        # indexing for flipping, which is not available with h5py
        # There would also be a lot of overhead since h5py writes on update.
        sinogram = np.zeros(self.sinogram.shape)
        for key in itertools.product(*map(xrange,self.input_data.shape[:-1])):
            # Key iterates over all indices in stack of sinograms
            signal = self.input_data[key][r_min:r_max]
            # Index dark profile. Stack number and frame number.
            dark = darkcurrent[key[0],key[-1] % nframes,...]
            # Use signal+dark as squared error. dy ~ sqrt(y) in poisson statistics
            w = 1.0 / (signal+dark)
            B = A * np.array([w,w,w])
            covC = np.linalg.inv(np.dot(B,A.T))
            c = np.dot(np.dot(covC, B), signal)
            sinogram[key] = c[2]

            sinogram_peaks[key+(0,)] = signal
            sinogram_peaks[key+(1,)] = np.dot(A.T,c)

        if self.do_flip:
            rev = sinogram[...,1::2,::-1].copy()
            sinogram[...,1::2,:] = rev
        self.sinogram[:] = sinogram


    @utils.Script.timed
    def output(self):
        self.out_file.close()

if __name__ == '__main__':
    locale.setlocale(locale.LC_NUMERIC, '')

    assmbl = Assembler()

    assmbl.parser_setup()
    assmbl.parse()
    assmbl.assemble_peaks()
    assmbl.output()
else:
    pass
    # Initialize assmbl with values from DAWN
    # assmbl = Assembler(position=.., fwhm = ..., shape="gaussian")
