#!/usr/bin/env python

import numpy as np
import os, optparse
import h5py, fabio

from skimage import transform

import xraylib
from xraylib import files, utils, image

class Reconstructor(utils.Script):
    def __init__(self, **kwargs):
        super(Reconstructor, self).__init__()
        self.description = """
        Correct sinograms and perform reconstruction.
        By default the sinogram is split into odd and even rows
        which are correlated to correct for offset in interleaved
        scans, followed by a search for the center of rotation.
        """

    def parser_setup(self):
        super(Reconstructor, self).parser_setup()

        input_group = optparse.OptionGroup(self.parser, "Input options")
        input_group.add_option("--sinogram-group", dest="sinogram_group",
                          help="", default=None)
        input_group.add_option("--iterations", dest="sart_iterations", default=1,
                          help="Number of iterations to perform SART reconstruction. [default=1]")


        output_group = optparse.OptionGroup(self.parser, "Output options")
        output_group.add_option("--output-sinogram", dest="output_sinogram",
                          action="store_true", default=True)
        output_group.add_option("--output-reconstruction", dest="output_reconstruction",
                          action="store_true", default=True)
        output_group.add_option("-o", "--out", dest="outfile",
                          help="Write reconstruction slices to file.", metavar="FILE", default=None)

        self.parser.add_option_group(input_group)
        self.parser.add_option_group(output_group)

    @utils.Script.timed
    def parse(self):
        super(Reconstructor, self).parse()

        self.sart_iterations = utils.convert(self.options.sart_iterations,int)

        if len(self.args) > 1 or len(self.args) == 0:
            self.parser.error("Please specify one and only one sinogram file")

        try:
            self.sino_file = h5py.File(self.args[0])
        except:
            self.parser.error("Could not open sinogram")

        if not xraylib.SINOGRAM_GROUP in self.sino_file:
            self.parser.error('File does not have group %s' % (xraylib.SINOGRAM_GROUP,))

        self.sino_group = self.sino_file[xraylib.SINOGRAM_GROUP]

        self.corrected_group = self.sino_file.require_group(xraylib.CORRECTED_SINOGRAM_GROUP)
        self.reconstruction_group = self.sino_file.require_group(xraylib.CORRECTED_SINOGRAM_GROUP)


    @utils.Script.timed
    def process_sinograms(self):
        for key,data_set in self.sino_group.items():
            if len(data_set.shape) > 2:
                slices = data_set.shape[2]
                sinogram = data_set.value
            else:
                slices = 1
                sinogram = data_set.value.shape((1,)+data_set.shape)

            corrected_dataset = self.corrected_group.require_dataset(
                    name=key,
                    shape=sinogram.squeeze().shape,
                    dtype="float32"
            )
            ret = np.zeros(sinogram.shape)
            for i in xrange(0,slices):
                corrected_sinogram = image.sino_deinterlace(sinogram[i])
                corrected_sinogram = image.sino_center(corrected_sinogram)
                ret[i,...] = corrected_sinogram

            corrected_dataset[:] = ret.squeeze()


    @utils.Script.timed
    def reconstruct(self):
        for key,data_set in self.corrected_group.items():
            # FIXME check whether corrected_sinogram is a stack of sinograms
            corrected_sinogram = data_set.value
            corrected_sinogram = corrected_sinogram.astype('double').T,

            # Do a fast, filtered back projection reconstruction
            # as initial guess for the SART reconstruction procedure
            reconstruction = transform.iradon(
                    corrected_sinogram,
                    output_size = corrected_sinogram.shape[1]
            )
            for i in xrange(0,self.sart_iterations):
                reconstruction = transform.iradon_sart(
                        corrected_sinogram,
                        image=reconstruction
                )

                # Do a fast, filtered back projection reconstruction
                # as initial guess for the SART reconstruction procedure
                reconstruction = transform.iradon(
                        sino,
                        output_size = sino.shape[1]
                )
                for it in xrange(0,self.sart_iterations):
                    reconstruction = transform.iradon_sart(
                            sino,
                            image=reconstruction
                    )

                reconstruction_dataset[i] = reconstruction

    @utils.Script.timed
    def output(self):
        self.sino_file.close()

if __name__ == '__main__':
    reconst = Reconstructor()

    reconst.parser_setup()
    reconst.parse()
    reconst.process_sinograms()
    reconst.reconstruct()
    reconst.output()
else:
    pass
    # Initialize assmbl with values from DAWN
    # assmbl = Reconstructor(position=.., fwhm = ..., shape="gaussian")
