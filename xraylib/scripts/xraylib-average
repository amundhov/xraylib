#!/usr/bin/env python

import os, optparse
import numpy as np

import xraylib
from xraylib import f2w, files, utils

class Averager(utils.Script):
    def __init__(self):
        super(Averager, self).__init__()
        description = """
        Merge diffraction images and write average to file.
        """
    def parser_setup(self):
        super(Averager, self).parser_setup()

        output_group = optparse.OptionGroup(self.parser, "Output options")
        output_group.add_option("-o", "--out", dest="outfile",
                          help="File to save averaged dataset", metavar="FILE", default="averaged.edf")
        output_group.add_option("--data-set", dest="data_set",
                          help="Location to save data set (hdf5 etc).", metavar="STRING", default="/xraylib/average")
        output_group.add_option("-g", action="store_true", help="Group option.")

        self.parser.add_option_group(output_group)

        self.parser.add_option("-f", "--fast",
                          action="store_true", dest="fast_edf", default=False,
                          help="Use fast data reading [edf only].")
        self.parser.add_option("--method",
                          dest="method", default="median",
                          metavar="[median][mean]", help="Choose between arithmetic mean and median.")

    def parse(self):
        super(Averager, self).parse()

        if len(self.args) == 0:
            self.parser.error("Please provide some images to average.")

        # TODO write test
        if self.options.fast_edf and not all([os.path.splitext(file_path)[1] == '.edf' for file_path in self.args]):
            self.parser.error("Fast data reading only available for edf files")

        if len(self.options.data_set.split('/')) < 2:
            self.parser.error("Dataset should be on the form '/group_name/data_set'.")

    @utils.Script.timed
    def average(self):
        self.image = utils.averageImages(self.args, fast_edf=self.options.fast_edf)

    @utils.Script.timed
    def output(self):
        out = files.ImageFile(self.options.outfile)
        out.saveImage(self.image, self.options.data_set)


if __name__ == '__main__':
    avg = Averager()

    avg.parser_setup()
    avg.parse()
    avg.average()
    avg.output()
    avg.print_timings()

