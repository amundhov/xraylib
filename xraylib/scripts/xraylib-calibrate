#!/usr/bin/env python

import numpy as np

import xraylib, os
from xraylib import f2w, files

if __name__ == "__main__":
    # Take arguments from command line
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-V", "--version", dest="version", action="store_true",
                      help="print version of the program and quit", metavar="FILE", default=False)
    parser.add_option("-o", "--out", dest="outfile",
                      help="Filename where processed calibration image is saved", metavar="FILE", default="calibration.edf")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="debug", default=False,
                      help="switch to debug/verbose mode")
    parser.add_option("-d", "--dark", dest="dark",
                  help="list of dark images to average and subtract", default=None)
    parser.add_option("-D", "--detector", dest="detector_name",
                  help="Detector name", default=None)

    (options, args) = parser.parse_args()

    if len(args) !=1:
        parser.error("Please provide one and only one calibration image")

    if options.detector_name is not None:
        detector = f2w.get_detector(options.detector_name)
    else:
        parser.error("Detector missing")

    print options, args
    calibration_image = files.Image(args[0]).getImage()

    if options.dark:
        # FIXME allow files to be arguments, not comma separated list
        print options.dark, type(options.dark)
        darkImages = [files.Image(f).getImage() for f in options.dark.split(",") if os.path.isfile(f)]
        darkImages = nunp.array(darkImages)
        dark_current = np.median(darkImages,axis=0)
        calibration_image = calibration_image - dark_current

    # Do the calibration
    calibrator = f2w.Calibrator(calibration_image, detector)
    calibrator.calibrate()
    print(calibrator)

