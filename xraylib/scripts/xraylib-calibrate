#!/usr/bin/env python

import numpy as np
import os, optparse

import xraylib
from xraylib import f2w, files, utils


try:
    import pyFAI
except ImportError:
    pyFAI = None

class Calibration(utils.Script):
    def __init__(self):
        super(Calibration, self).__init__()
        self.usage = 'Usage: %prog <options> CALIBRATION_IMAGE [DARK_CURRENT1,DARK_CURRENT2,...]'
        self.description = """
        XRD calibration routine based on ring shape.
        """

    def parser_setup(self):
        super(Calibration, self).parser_setup()

        self.parser.add_option("--pixels", dest="pixels",
                          action="store_true", default=False,
                          help="Origin and calibration limits in pixels instead of mm.")
        file_group = optparse.OptionGroup(self.parser, "File options")
        file_group.add_option("-o", "--out", dest="outfile",
                      help="Save calibration image after subtracting darkcurrent", metavar="FILE")
        file_group.add_option("--data-set", dest="data_set",
                     help="Location to save data set.", metavar="STRING", default=xraylib.CALIBRATION_IMAGE)
        file_group.add_option("-p", "--poni", dest="poni_file",
                      help="File to save detector geometry", metavar="FILE", default="geometry.poni")

        detector_group = optparse.OptionGroup(self.parser, "Detector options")
        detector_group.add_option("-D", "--detector", dest="detector_name",
                      help="Detector name", default=None)
        detector_group.add_option("--distance", dest="detector_distance",
                      help="Detector distance from sample", metavar="<distance> [mm]",default=None)
        detector_group.add_option("--binning", dest="detector_binning", nargs=2, action='append',
                      help="Pixels in x and y that detector is set to group.",
                      metavar="<count>",default=None)
        detector_group.add_option ('--tilt', dest="detector_tilt", nargs=2, action='append',
                      help="",
                      metavar="<tilt1> <tilt2> [degrees]", default=None)
        detector_group.add_option ('--origin', dest="detector_origin", nargs=2, action='append',
                      help="Detector origin wrt sample",
                      metavar="<x> <y> [mm]", default=None)

        calibration_group = optparse.OptionGroup(self.parser, "Calibration options")
        calibration_group.add_option ('--limits', dest="limits", nargs=2, action='append',
                      metavar="<lower> <upper>", help="Radial distance [mm] to use for calibration.", default=None)

        self.parser.add_option_group(file_group)
        self.parser.add_option_group(detector_group)
        self.parser.add_option_group(calibration_group)

    def parse(self):
        super(Calibration, self).parse()

        if len(self.args) == 0:
            self.parser.print_help()
            self.parser.exit()

        # Set up self.detector
        DETECTOR_KWARGS = {
                'distance': self.options.detector_distance,
                'binning' : self.options.detector_binning,
                'origin'  : self.options.detector_origin,
                'tilt'    : self.options.detector_tilt,
        }

        if self.options.detector_name is not None:
            DETECTOR_KWARGS = utils.strip_none_values(DETECTOR_KWARGS)
            DETECTOR_KWARGS = utils.flatten(DETECTOR_KWARGS)
            DETECTOR_KWARGS = utils.convert(DETECTOR_KWARGS,float)
            self.detector = f2w.get_detector(self.options.detector_name, **DETECTOR_KWARGS)

            if self.options.pixels and 'origin' in DETECTOR_KWARGS:
                self.detector.setorigin(list(np.multiply(self.detector._origin,self.detector._pixelsize)))

        else:
            self.parser.error("self.detector missing")


        if len(self.args) > 1:
            self.dark_current = files.ImageFile(self.args[0]).getImage()
            self.calibration_image = files.ImageFile(self.args[1]).getImage()
        else:
            self.calibration_image = files.ImageFile(self.args[0]).getImage()
            self.dark_current = None

        if self.options.outfile:
            self.print_verbose('---> Saving %s' % (self.options.outfile,))
            f = files.ImageFile(self.options.outfile)
            cal = self.calibration_image.astype('int')-self.dark_current 
            cal[cal<0] = 0  # Usually calibration image is uin16, so is prone to integer underflow
            f.saveImage(cal.astype(self.calibration_image.dtype) , self.options.data_set)

        self.calibrator = f2w.Calibrator(self.calibration_image, self.dark_current, self.detector)

        self.CALIBRATION_KWARGS = {
                'limits' : self.options.limits
        }
        self.CALIBRATION_KWARGS = utils.strip_none_values(self.CALIBRATION_KWARGS)
        self.CALIBRATION_KWARGS = utils.flatten(self.CALIBRATION_KWARGS)
        self.CALIBRATION_KWARGS = utils.convert(self.CALIBRATION_KWARGS,float)
        if self.options.pixels and 'limits' in self.CALIBRATION_KWARGS:
            self.CALIBRATION_KWARGS['limits'] = list(np.multiply(self.CALIBRATION_KWARGS['limits'],self.detector._pixelsize))

    @utils.Script.timed
    def calibrate(self):
        self.print_verbose("---> Calibrating")
        self.calibrator.calibrate(**self.CALIBRATION_KWARGS)
        self.print_verbose(self.calibrator)

        if pyFAI is None and self.options.poni_file:
            self.parser.error("pyFAI needed for PONI file")
        elif pyFAI is not None and self.options.poni_file:
            from pyFAI import geometry
            g = geometry.Geometry()

            # converto to fit2D tilt plane notation from projected tilt angles in f2w.py
            alpha = self.detector._tilt[0] * np.pi / 180
            beta  = self.detector._tilt[1] * np.pi / 180
            tiltPlanRotation = np.arctan(alpha/beta)
            tilt = alpha * np.sin(tiltPlanRotation) + beta * np.cos(tiltPlanRotation)

            # Convert to degrees used by fit2D
            tiltPlanRotation = tiltPlanRotation * 180.0 / np.pi
            tilt = tilt * 180.0 / np.pi

            self.print_verbose("tilt ", tilt)
            self.print_verbose("tiltPlanRotation ", tiltPlanRotation)
            g.setFit2D(self.detector._distance,
                       self.detector._origin[1]/self.detector._pixelsize[1], # mm -> #
                       self.detector._origin[0]/self.detector._pixelsize[0], # mm -> #
                       tiltPlanRotation=tiltPlanRotation,   # deg -> rad
                       tilt=tilt,   # deg -> rad
                       pixelX=self.detector._pixelsize[0]*1000.0,  # mm -> um
                       pixelY=self.detector._pixelsize[1]*1000.0)  # mm -> um
            self.print_verbose("---> Writing geometry to", self.options.poni_file)
            g.save(self.options.poni_file)

    def output(self):
        if self.options.outfile is None:
            return
        if self.dark_current is not None:
            calibration_profile = self.detector.integrate(self.calibration_image - self.dark_current)
        else:
            calibration_profile = self.detector.integrate(self.calibration_image)
        files.ImageFile(self.options.outfile).saveImage(calibration_profile[1], xraylib.CALIBRATION_PROFILE)

if __name__ == "__main__":
    cal = Calibration()
    cal.parser_setup()
    cal.parse()
    cal.calibrate()
    cal.output()
    cal.print_timings()

