#!/usr/bin/env python

import numpy as np

import xraylib, os
from xraylib import f2w, files, utils

try:
    import pyFAI
except ImportError:
    pyFAI = None

if __name__ == "__main__":
    # Take arguments from command line
    from optparse import OptionParser
    usage = 'Usage: %prog <options> [DARK_CURRENT_FILE,...] CALIBRATION_FILE'
    description = """
    Xray-calibration routine based on ring shape.
    """
    parser = OptionParser(usage=usage,description=description)

    parser.add_option("-V", "--version", dest="version", action="store_true",
                      help="print version of the program and quit", metavar="FILE", default=False)
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="switch to debug/verbose mode")

    parser.add_option("-o", "--out", dest="outfile",
                      help="Filename where processed calibration image is saved", metavar="FILE", default="calibration_image.edf")
    parser.add_option("--data-set", dest="data_set",
                      help="Location to save data set.", metavar="STRING", default="/xraylib/calibration_image")
    parser.add_option("-d", "--dark", dest="dark",
                  help="list of dark images to average and subtract", default=None)
    parser.add_option("-p", "--poni", dest="poni_file",
                      help="File to save detector geometry", metavar="FILE", default="geometry.poni")

    parser.add_option("-D", "--detector", dest="detector_name",
                  help="Detector name", default=None)
    parser.add_option("--distance", dest="detector_distance",
                  help="Detector distance from sample", metavar="<distance> [mm]",default=None)
    parser.add_option ('--tilt', dest="detector_tilt", nargs=2, action='append',
                  help="", metavar="<tilt1> <tilt2> [degrees]", default=None)
    parser.add_option ('--origin', dest="detector_origin", nargs=2, action='append',
                  help="Detector origin wrt sample, also known as PONI (Point of normal incidence)",
                  metavar="<poni1> <poni2> [mm]", default=None)

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.error("Please provide a calibration image")

    # Set up detector
    DETECTOR_KWARGS = {
            'distance': options.detector_distance,
            'origin'  : options.detector_origin,
            'tilt'    : options.detector_tilt,
    }

    if options.detector_name is not None:
        DETECTOR_KWARGS = utils.strip_none_values(DETECTOR_KWARGS)
        detector = f2w.get_detector(options.detector_name, **DETECTOR_KWARGS)
    else:
        parser.error("Detector missing")

    #print options, args
    calibration_image = files.ImageFile(args[0]).getImage()

    if options.dark:
        # FIXME allow files to be arguments, not comma separated list
        if options.verbose:
            print("---> Averaging dark images")
        dark_current = utils.averageImages(options.dark.split(","))
        calibration_image = calibration_image - dark_current

    # Do the calibration

    calibrator = f2w.Calibrator(calibration_image, detector)
    if options.verbose:
        print("---> Calibrating")
    calibrator.calibrate()
    print(calibrator)

    if options.outfile:
        if options.verbose:
            print('---> Saving calibration image - %s' % (options.outfile,))
        f = files.ImageFile(options.outfile)
        f.saveImage(calibration_image, options.data_set)

    if pyFAI is None and options.poni_file:
        parser.error("pyFAI needed for PONI file")
    elif pyFAI is not None and options.poni_file:
        from pyFAI import geometry
        g = geometry.Geometry()
        g.setFit2D(detector._distance, detector._origin[0]/detector._pixelsize[0], # mm -> pixel
                                       detector._origin[1]/detector._pixelsize[1], # mm -> pixel
                                    tilt=detector._tilt[0],
                        tiltPlanRotation=detector._tilt[1],
                                pixelX=detector._pixelsize[0],
                                pixelY=detector._pixelsize[1])
        g.save(options.poni_file)


